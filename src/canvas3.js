// Generated by CoffeeScript 1.7.1
(function() {
  var Calculator, Canvas, Pen, ShapeLayer, root,
    __slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.ShapeLayer = ShapeLayer;

  ShapeLayer = (function() {
    ShapeLayer.fuctionForDrawingCollection = [];

    function ShapeLayer(pen) {
      this.pen = pen;
    }

    ShapeLayer.prototype.lineFunc = function(x, y, x2, y2) {
      return (function(_this) {
        return function() {
          return pen.line(x, y, x2, y2);
        };
      })(this);
    };

    ShapeLayer.prototype.line = function(x, y, x2, y2) {
      this.fuctionForDrawingCollection.push(this.lineFunc(x, y, x2, y2));
      return this;
    };

    ShapeLayer.prototype.drawAll = function() {
      var f, _i, _len, _ref, _results;
      _ref = this.fuctionForDrawingCollectionion;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        _results.push(f());
      }
      return _results;
    };

    return ShapeLayer;

  })();

  root.Calculator = Calculator;

  Calculator = {
    distanceBetweenTwoPoints: function(x, y, x2, y2) {
      return Math.sqrt((x2 - x) * (x2 - x) + (y2 - y) * (y2 - y));
    },
    lineEndPositionByAngle: function(x, y, distance, angleInDegree) {
      var dx, dy;
      dx = Math.sin(angleInDegree / 180 * Math.PI) * distance;
      dy = Math.cos(angleInDegree / 180 * Math.PI) * distance;
      return {
        x: x + dx,
        y: y - dy
      };
    },
    positionOnCanvasFromEvent: function(e) {
      var bbox, x, y;
      x = e.clientX;
      y = e.clientY;
      bbox = canvas.getBoundingClientRect();
      return {
        x: x - bbox.left * (canvas.width / bbox.width),
        y: y - bbox.top * (canvas.height / bbox.height)
      };
    }
  };

  root.Canvas = Canvas;

  Canvas = (function() {
    function Canvas(canvasID) {
      this.canvasID = canvasID != null ? canvasID : "canvas";
      this.width = 600;
      this.height = 400;
      this.canvas = null;
      this.cxt = null;
      this.init();
    }

    Canvas.prototype.init = function() {
      return this.setCanvas(this.canvasID);
    };

    Canvas.prototype.setCanvas = function(canvasID) {
      this.canvas = window.document.getElementById(canvasID);
      this.cxt = this.canvas.getContext("2d");
      return this;
    };

    return Canvas;

  })();

  root.Pen = Pen;

  Pen = (function() {
    var BLANK;

    BLANK = "rgba(255,255,255,0)";

    function Pen(canvas) {
      this.canvas = canvas.canvas;
      this.cxt = canvas.cxt;
      this.imageData = null;
      this.init();
    }

    Pen.prototype.init = function() {
      return this.moveCanvas(0.5, 0.5);
    };


    /*
    Style Configuration
     */

    Pen.prototype.setFillStyle = function(style) {
      if (style === null) {
        this.cxt.fillStyle = BLANK;
      } else {
        this.cxt.fillStyle = style;
      }
      return this;
    };

    Pen.prototype.setFontStyle = function(style) {
      this.cxt.font = style;
      return this;
    };

    Pen.prototype.setLineStyle = function(style) {
      if (style === null) {
        this.cxt.strokeStyle = BLANK;
      } else {
        this.cxt.strokeStyle = style;
      }
      return this;
    };

    Pen.prototype.setLineWidth = function(width) {
      this.cxt.lineWidth = width;
      return this;
    };

    Pen.prototype.saveStyleConfiguration = function() {
      this.cxt.save();
      return this;
    };

    Pen.prototype.restoreStyleConfiguration = function() {
      this.cxt.restore();
      return this;
    };


    /*
    Draw Functions
     */

    Pen.prototype.line = function(x, y, x2, y2) {
      this.cxt.beginPath();
      this.cxt.moveTo(x, y);
      this.cxt.lineTo(x2, y2);
      this.cxt.stroke();
      return this;
    };

    Pen.prototype.rect = function(x, y, width, height) {
      this.cxt.strokeRect(x, y, width, height);
      this.cxt.fillRect(x, y, width, height);
      return this;
    };

    Pen.prototype.circle = function(x, y, radius) {
      this.cxt.beginPath();
      this.cxt.moveTo(x, y);
      this.cxt.arc(x, y, radius, 0, Math.PI * 2);
      this.cxt.closePath();
      this.cxt.stroke();
      this.cxt.fill();
      return this;
    };

    Pen.prototype.poly = function() {
      var points;
      points = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.cxt.beginPath();
      this.cxt.moveTo(points.pop(), points.pop());
      while (points.length !== 0) {
        this.cxt.lineTo(points.pop(), points.pop());
      }
      this.cxt.closePath();
      this.cxt.stroke();
      this.cxt.fill();
      return this;
    };

    Pen.prototype.text = function(x, y, text) {
      this.cxt.strokeText(text, x, y);
      this.cxt.fillText(text, x, y);
      return this;
    };

    Pen.prototype.image = function(x, y, src) {
      var img;
      img = new Image();
      img.src = src;
      if (img.complete) {
        this.cxt.drawImage(img, x, y);
      } else {
        img.onload = function() {
          return this.cxt.drawImage(img, x, y);
        };
      }
      return this;
    };


    /*
    Canvas Movement
     */

    Pen.prototype.moveCanvas = function(x, y) {
      this.cxt.translate(x, y);
      return this;
    };

    Pen.prototype.rotateCanvas = function(angle) {
      this.cxt.rotate(angle);
      return this;
    };

    return Pen;

  })();

}).call(this);

//# sourceMappingURL=canvas3.map
